{"version":3,"sources":["components/Editor.js","components/hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","displayName","value","onChange","language","useState","open","setOpen","className","type","onClick","prevOpen","class","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","inintialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","initialValue","setValue","useEffect","setItem","stringify","App","display","document","querySelector","toppane","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeOut","setTimeout","clearTimeout","classList","toggle","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gOAQe,SAASA,EAAT,GAA6D,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAAY,EACjDC,oBAAS,GADwC,mBAClEC,EADkE,KAC5DC,EAD4D,KAOzE,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGP,EACD,wBACEQ,KAAK,SACLD,UAAU,SACVE,QAAS,WACPH,GAAQ,SAACI,GAAD,OAAeA,MAJ3B,SAOGL,EACC,mBAAGM,MAAM,wBAET,mBAAGA,MAAM,2BAIf,cAAC,aAAD,CACEC,eAvBN,SAAsBC,EAAQC,EAAMb,GAClCC,EAASD,IAuBLA,MAAOA,EACPM,UAAU,sBACVQ,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMf,EACNgB,MAAO,WACPC,aAAa,QCtCR,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,cAGgBF,EAD6B,EAGhClB,oBAAS,WACjC,IAAMqB,EAAYC,aAAaC,QAAQH,GAEvC,OAAkB,OAAdC,EAA2BG,KAAKC,MAAMJ,GAEd,oBAAjBK,aACFP,IAEAA,KAX+C,mBAGnDtB,EAHmD,KAG5C8B,EAH4C,KAmB1D,OAJAC,qBAAU,WACRN,aAAaO,QAAQT,EAAaI,KAAKM,UAAUjC,MAChD,CAACuB,EAAavB,IAEV,CAACA,EAAO8B,GCnBF,SAASI,IACtB,IAAMC,EAAUC,SAASC,cAAc,YACjCC,EAAUF,SAASC,cAAc,aAFX,EAIJjB,EAAgB,OAAQ,IAJpB,mBAIrBmB,EAJqB,KAIfC,EAJe,OAKNpB,EAAgB,MAAO,IALjB,mBAKrBqB,EALqB,KAKhBC,EALgB,OAMRtB,EAAgB,KAAM,IANd,mBAMrBuB,EANqB,KAMjBC,EANiB,OAOAzC,mBAAS,IAPT,mBAOrB0C,EAPqB,KAObC,EAPa,KAoB5B,OAXAf,qBAAU,WACR,IAAMgB,EAAUC,YAAW,WACzBF,EAAU,uBAAD,OACDP,EADC,iCAEAE,EAFA,mCAGCE,EAHD,8BAKR,KACH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,qCACE,sBAAKrC,UAAU,gBAAf,UACE,cAACR,EAAD,CACEI,SAAS,MACTH,YAAY,OACZC,MAAOuC,EACPtC,SAAUuC,EACVlC,UAAU,wBAEZ,cAACR,EAAD,CACEI,SAAS,MACTH,YAAY,MACZC,MAAOyC,EACPxC,SAAUyC,EACVpC,UAAU,wBAEZ,cAACR,EAAD,CACEI,SAAS,aACTH,YAAY,aACZC,MAAO2C,EACP1C,SAAU2C,EACVtC,UAAU,2BAGd,sBAAKA,UAAU,OAAf,UACE,wBACEA,UAAU,OACVE,QAAS,WACP2B,EAAQe,UAAUC,OAAO,cACzBb,EAAQY,UAAUC,OAAO,SAJ7B,SAOE,mBAAG7C,UAAU,oBAEf,wBACEA,UAAU,UACVuC,OAAQA,EACRO,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eClEjB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClC,EAAD,MAEFE,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.5fece9b7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/css/css\";\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\n\nexport default function Editor({ displayName, value, onChange, language }) {\n  const [open, setOpen] = useState(true);\n\n  function handleChange(editor, data, value) {\n    onChange(value);\n  }\n\n  return (\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"ec-btn\"\n          onClick={() => {\n            setOpen((prevOpen) => !prevOpen);\n          }}\n        >\n          {open ? (\n            <i class=\"fas fa-compress-alt\"></i>\n          ) : (\n            <i class=\"fas fa-expand-alt\"></i>\n          )}\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: \"material\",\n          lineNumbers: true,\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nconst prefix = \"coding-toy-\";\n\nexport default function useLocalStorage(key, inintialValue) {\n  const prefixedKey = prefix + key;\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n\n    if (jsonValue !== null) return JSON.parse(jsonValue);\n\n    if (typeof initialValue === \"function\") {\n      return inintialValue();\n    } else {\n      return inintialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n}\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./components/Editor\";\nimport useLocalStorage from \"./components/hooks/useLocalStorage\";\n\nexport default function App() {\n  const display = document.querySelector(\".display\");\n  const toppane = document.querySelector(\".top-pane\");\n\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [js, setJs] = useLocalStorage(\"js\", \"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setSrcDoc(`<html>\n      <body>${html}</body>\n      <style>${css}</style>\n      <script>${js}</script>\n    </html>`);\n    }, 250);\n    return () => clearTimeout(timeOut);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n          className=\"code-mirror-wrapper\"\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n          className=\"code-mirror-wrapper\"\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JAVASCRIPT\"\n          value={js}\n          onChange={setJs}\n          className=\"code-mirror-wrapper\"\n        />\n      </div>\n      <div className=\"pane\">\n        <button\n          className=\"full\"\n          onClick={() => {\n            display.classList.toggle(\"fullscreen\");\n            toppane.classList.toggle(\"less\");\n          }}\n        >\n          <i className=\"fas fa-expand\"></i>\n        </button>\n        <iframe\n          className=\"display\"\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        ></iframe>\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}